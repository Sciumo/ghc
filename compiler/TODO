## TODO FIRST

## TODO NEXT

* Kind polymorphism
  * Add a boolean in TyVar and TcTyVar to know if it's a kind variable or not
    and add a commentary about why it is ok to mix type and kind variables.
  * Implicit kind polymorphism

## BUGS

* "inplace/bin/ghc-stage2.exe"   -H32m -O -Wall -Werror -H64m -O0 -DNEW_GHC_LAYOUT   -hide-all-packages -i -iutils/haddock/src -iutils/haddock/dist/build -iutils/haddock/dist/build/autogen -Iutils/haddock/dist/build -Iutils/haddock/dist/build/autogen    -optP-DIN_GHC_TREE -optP-include -optPutils/haddock/dist/build/autogen/cabal_macros.h -package Cabal-1.11.2 -package array-0.3.0.3 -package base-4.4.0.0 -package containers-0.4.1.0 -package directory-1.1.0.1 -package filepath-1.2.0.1 -package ghc-7.3.20110811 -package pretty-1.1.0.0 -package xhtml-3000.2.0.1  -funbox-strict-fields -O2 -Wall -fwarn-tabs -XHaskell2010 -XCPP -XDeriveDataTypeable -XScopedTypeVariables -XMagicHash -no-user-package-conf -rtsopts     -odir utils/haddock/dist/build -hidir utils/haddock/dist/build -stubdir utils/haddock/dist/build -hisuf hi -osuf  o -hcsuf hc -c utils/haddock/dist/build/Haddock/Lex.hs -o utils/haddock/dist/build/Haddock/Lex.o
Segmentation fault/access violation in generated code

* We do not track ticks in Iface, so [ 'List * ] gets printed [ List * ].
  We can look at the namespace of the OccName to know if we print a tick (works only for lifted data, since we don't know if we are in a type or kind context).

* Error messages for things like:
  data T (a : 'T -> *) = MkT (a 'MkT)

* Promoted primitive negative integers are not parsed.
  > f :: -1

* Operators are not printed correctly. See bug/Operators.hs.

* Kinds are not always printed correctly.
  (*, *) instead of '(*, *)
  [*] instead of '[*]
  We might add a Promoted flag in HsTupleTy and HsListTy.

## OPTIONAL

* Pattern match(es) are non-exhaustive (splitAt in Vector.hs)
  The problem is already there in master.

* No wildpat in types.  Neither is there a warning on unused variables.

* What about lifting type operators?

* Maybe want to merge UserTyVar and KindedTyVar

* ''a' -> ITtyvar a'
  instead of ITsimplequote 'a'

* Getting rid of subkinding.

  kappa ::= eta | # | (#) | ? | ??
  eta ::= * | eta -> eta | T eta .. eta

  Gamma, alpha : ??, x : alpha |- e
  ----------------------------------
  Gamma |- \x -> e

  error : forall (a : ?). String -> a  (still weird)

  Gamma |- tau : kappa1 in * or #
  Gamma |- sigma : kappa2 in * or # or (#)
  ----------------------------------------
  Gamma |- tau -> sigma : *

  ? and ?? only appear at top level, and they always get set to star
  when unified with a meta kind variable

----------------------------------------------------------------------
--                             HELPERS                              --
----------------------------------------------------------------------

  1. How to check conflicts in the parser

% cd compiler/parser
% gcc -E -undef -traditional -P -Iincludes -x c Parser.y.pp | grep -v '^#pragma GCC' >! Parser.y && happy -agc --strict Parser.y -i

